* TODO
- [ ] SIMD
- [ ] полное и занковое(или как это по-русски называется) умножение
- [ ] деление со знаком

* Регистры

Регистровый файл имеет интерестую особенность: он умеет в двойное продолжительное чтение.
То есть можно одновременно считывать два регистра(или один и тот же, но зачем) и параллельно чтению
производить запись. При этом запись в регистр, который сейчас читается, никак не скажется на выходе.
Это позволяет очень сильно упростить реализацию микрокодов.

всего есть 18 регистров:
  * 0 - всегда 0
  * 1..14 - регистры общего назначения
  * 15 - указатель на текущую инструкцию
  * 16 - указатель на таблицу виртуальных адресов(см. ниже)
  * 17 - регистр флагов

К 16 и 17 регистру обращение происходит через специальные инструкции.
  
все эти регистры содержатся в 2 экземлярах: для kernel mode и user mode

за переключение между этими режимами отвечает флаг в регистре состояний ядра(см. ниже)

** Состояния ядра

| № бита | Имя         | Значение                                                                               |
|--------+-------------+----------------------------------------------------------------------------------------|
|      0 | ENABLED     |                                                                                        |
|      1 | INTERRUPTS  |                                                                                        |
|      2 | PAGING      |                                                                                        |
|      3 | USER MODE   |                                                                                        |
|      4 | ISINTERRUPT | включается автоматически. если 1, то USER MODE = 0 и остальные прерывания не вызваются |


* Ядро
** Шины
- sdb (shared data bus)
- ab (address bus)
- Rout1 (reg. file output 1)
- Rout2 (reg. file output 2)

** Микрокоды

| Имя       | Описание                   |
|-----------+----------------------------|
| R1        | read id1 register -> Rout1 |
| R2        | read id2 register -> Rout2 |
| num64_ro2 | num64 -> Rout2 bus         |
| W         | write to id3 register      |
| ALU_sum   | sum -> sdb                 |
| ALU_sub   | sub -> sdb                 |

** Инструкции
структура инструкции:
  * 0..7 - opcode
  * 8..11 - register 1
  * 12..15 - register 2
  * 16..19 - register 3
  * 20..27 - num8
  * 28..29 - bitwidth
  * 30..63 - reserved

  * 0..63 - num64

|  № | Имя    | Аргументы | Описание                                             |
|----+--------+-----------+------------------------------------------------------|
|  0 | sto    | r r num64 |                                                      |
|  1 | loa    | r r num64 |                                                      |
|  2 | add    | r r r     |                                                      |
|  3 | sub    | r r r     |                                                      |
|  4 | mul    | r r r     |                                                      |
|  5 | div    | r r r     |                                                      |
|  6 | add    | r r num64 |                                                      |
|  7 | sub    | r r num64 |                                                      |
|  8 | mul    | r r num64 |                                                      |
|  9 | div    | r r num64 |                                                      |
| 10 | adde   | r r num64 |                                                      |
| 11 | addne  | r r num64 |                                                      |
| 12 | addg   | r r num64 |                                                      |
| 13 | addl   | r r num64 |                                                      |
| 14 | addsg  | r r num64 |                                                      |
| 15 | addsl  | r r num64 |                                                      |
| 16 | not    | r r       |                                                      |
| 17 | and    | r r r     |                                                      |
| 18 | or     | r r r     |                                                      |
| 19 | xor    | r r r     |                                                      |
| 20 | shl    | r r r     |                                                      |
| 21 | shr    | r r r     |                                                      |
| 22 | and    | r r num64 |                                                      |
| 23 | or     | r r num64 |                                                      |
| 24 | xor    | r r num64 |                                                      |
| 25 | shl    | r r num64 |                                                      |
| 26 | shr    | r r num64 |                                                      |
| 27 | push   | r         |                                                      |
| 28 | pop    | r         |                                                      |
| 29 | call   | r         |                                                      |
| 30 | ret    |           |                                                      |
| 31 | int    | num8      |                                                      |
| 32 | iret   |           |                                                      |
| 33 | chst   | r         |                                                      |
| 34 | lost   | r         |                                                      |
| 35 | stou   | r num64   | сохранить все регистры USERMODE по адресу r1 + num64 |
| 36 | loau   | r num64   | загрузить все регистры USERMODE с адреса r1 + num64  |
| 37 | chtp   | r         |                                                      |
| 38 | lotp   | r         |                                                      |
| 39 | chflag | r         |                                                      |
| 40 | loflag | r         |                                                      |
#+TBLFM: $1=@#-2
#+TBLFM: $1='(format "%x" $1)
